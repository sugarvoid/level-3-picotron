picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ4Iixtb2RpZmllZD0iMjAyNS0w
OC0yMyAxMjozNjoxOCIscmV2aXNpb249Mzk0XV1sejQAnAIAAPQyAADzIXtbMF09e2JtcD1weHUA
QyAQEATwVgcQB8AX0BfABxAH8FYsZmxhZ3M9MCxwYW5feAgAx3k9MCx6b29tPTh9LD4A-wQICAT_
BDeeB24HPgceB24HHgcePwALLTExQAD-AAw3LgduB24HLgcuBx4HDkAAGvYLEBAE-jQYBh4GGG4H
FQYVBhUHXgATBhcGEwAIADsjFyMGAPAMCFMIAF4DCAM1AwgDTgADdwMAPgCTAD4QDhAeBAAPAQEc
NR41PgIAX04VXhUuQAALHDdAAPEFrhlOCRoJLgkKFwoJDgkKNwoZCjcKAG8XCgkuNR5OAB3xBBhO
CBkILggJGgkIDggJOgkYCToKAD8aCQhOAB8A0AD-A14YXgUHThUHBT4lAD4FABUuQEUAGQCiAVFY
ChkKrgQA3wkICb4pCr4JCt4K-jlHAB-vCc4KGb4KCQgKvhkK-ldAAB2fZwoZzgkICs4JPAAfL-Dw
MQDg8DlOGB4ofigOOB4oLggJKAmIDggJCBkoGRgeCA4IOQg5CC4oiQg_CKkIPgiJaIkoOQiJaBkY
SQguGBkoKRg_aAkICSguKB5YDghAAGAOOC4oPgg6AB8etwAeDzEA-------ccQgIBPQBFhQCABOU
CAAfhEEACywxNUIAkQ4PEw4NDg0OHQYA-wYNHg0OMx0OAy8bAx4NAzwDDQNcA_xTAB0--xswhgAu
ERMNAL8DDxsTDQ4TPBP8CFIADQ9LAR0fODEAjQDeAX8bF1QXVBckJQwdgg4EHgQeJA5UFAIuDgYd
Ag9JABQBSgCBDgQOJA4ULgZLAC8UFk0AJi-wMDIADQ9iAR4PMQD-------------------------
------------------------YlBtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
OC0yMyAyMDo0MDo1NSJdXQ==
:: kgo/
:: kgo/clock.lua
clock = {}
clock.__index = clock

function clock.new()
   local _c = setmetatable({}, clock)
   _c.seconds = 0
   _c.t = 0
   _c.is_running = false
   return _c
end

function clock:tick()
   self.seconds += 1
   self.t = 0
end

function clock:update()
   if self.is_running then
      self.t += 1
      if self.t >= 60 then
         self:tick()
      end
   end
end

function clock:stop()
   self.is_running = false
end

function clock:start()
   self.is_running = true
end

function clock:restart()
   self:stop()
   self.t = 0
   self.seconds = 0
   self:start()
end

:: kgo/functions.lua
--[[pod_format="raw",created="2025-08-23 15:43:30",modified="2025-08-23 17:48:16",revision=1]]
function p8_print(s, x, y, c)
	print("\014" .. s, x, y, c)
end

function randi(l,h)
	return flr(rnd(h+1-l))+l
end
:: kgo/hitbox.lua
Hitbox = Object:extend()

function Hitbox:new(owner, x, y, w, h, ox, oy)
    self.x = x
    self.y = y
    self.w = w
    self.h = h
    self.__ox = ox or 0
    self.__oy = oy or 0
    self.__owner = owner
end

function Hitbox:update()
    if self.__owner then
        self.x = self.__owner.x + self.__ox
        self.y = self.__owner.y + self.__oy
    end
end

function Hitbox:draw()
    rect(self.x, self.y, self.x + self.w, self.y + self.h, 8)
end

:: kgo/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA4LTIzIDExOjU5OjQ4Iixtb2RpZmllZD0iMjAyNS0w
OC0yMyAyMDo0MDo1NSJdXQ==
:: lib/
:: lib/classic.lua
--
-- classic
--
-- Copyright (c) 2014, rxi
--
-- This module is free software; you can redistribute it and/or modify it under
-- the terms of the MIT license. See LICENSE for details.
--


Object = {}
Object.__index = Object


function Object:new()
end


function Object:extend()
  local cls = {}
  for k, v in pairs(self) do
    if k:find("__") == 1 then
      cls[k] = v
    end
  end
  cls.__index = cls
  cls.super = self
  setmetatable(cls, self)
  return cls
end


function Object:implement(...)
  for _, cls in pairs({...}) do
    for k, v in pairs(cls) do
      if self[k] == nil and type(v) == "function" then
        self[k] = v
      end
    end
  end
end


function Object:is(T)
  local mt = getmetatable(self)
  while mt do
    if mt == T then
      return true
    end
    mt = getmetatable(mt)
  end
  return false
end


function Object:__tostring()
  return "Object"
end


function Object:__call(...)
  local obj = setmetatable({}, self)
  obj:new(...)
  return obj
end
:: lib/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA4LTIzIDExOjU5OjIwIixtb2RpZmllZD0iMjAyNS0w
OC0yMyAyMDo0MDo1NSJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ4Iixtb2RpZmllZD0iMjAyNS0w
NS0yMyAxMjo1NjoyNSIscmV2aXNpb249MzI0XV1sejQAggAAAF4QAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDMyAwAvIjABAP--8C8zMgQACw8BAE0vMzIEAAsPAQD---------------9X8QoiKSxo
aWRkZW49ZmFsc2UscGFuX3g9LTYwCgDyAHk9LTU0LHRpbGVfaD0xNgoAEHcKAKB6b29tPTAuNX19
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
OC0yMyAyMDo0MDo1NSJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ5Iixtb2RpZmllZD0iMjAyNS0w
NS0yMyAxMjo1NjoyNSIscmV2aXNpb249MzA2XV1sejQAoAAAAAsKAAD-MHB4dQADKAAABAAED0AQ
Ag4AAaABIAKgDgAPEAAN8MoBAgNADw_QBAUGB0AMkAgJCgtADJAPDA8NDw4MQAzw-wEA6-8nqgEQ
Bg8gEAEgASAB8AACEAIOEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYOMAD-----
-70f-wEArM-ID0AADxBA--_w8P8BAP-qUP----8p
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
OC0yMyAyMDo0MDo1NSJdXQ==
:: src/
:: src/building.lua
--[[pod_format="raw",created="2025-08-23 12:22:36",modified="2025-08-23 15:51:52",revision=27]]
Building = Object:extend()

function Building:new(x)
 self.health = 4
 self.x = x
 self.y = 71
 self.top = 70
 self.top_l_spr = 48
 self.top_r_spr = 48
 self.smoke = Smoke(x, self.top)
 self.has_fallen = false
 self.hitbox = Hitbox(self, self.x, self.y, 15, 4, -8)
end

function Building:update()
 self.smoke:update()
 for m in all(all_missiles) do
  if is_colliding(self.hitbox, m.hitbox) then
   del(all_missiles, m)
   self:take_damage()
   sfx(3)
  end
 end
 self.hitbox:update()
end

function Building:draw()
 --todo: add smoke animation with low health
 if self.health < 4 then
 	self.smoke:draw()
 end
 
 --todo: lower building based on health
 --sspr(56,0,16,8,self.x-8,self.top)
 --line(self.x-8,self.y,self.x-8,self.y+40,4)
 --line(self.x+7,self.y,self.x+7,self.y+40,4)

 
 spr(self.top_r_spr, self.x, self.y)
 spr(self.top_l_spr, self.x - 8, self.y)
 


 for i = 1, self.health do
  spr(48, self.x, self.y + (8 * i))
  spr(48, self.x - 8, self.y + (8 * i))
 end
 
 

 spr(56, self.x - 4, self.y + (8 * self.health)) --32)

    --rect(self.x-8,self.y,self.x+7,self.y+2,5)
    --print(self.health, self.x - 2, self.y + 4, 0)
    --self.hitbox:draw()
end

function Building:take_damage()
 if self.health == 0 then
  goto_gameover("game\nover")
 else
  --todo: update smoke y position
  
  self.y += 8
  self.smoke:set_y(self.y)
  self.health = mid(0, self.health - 1, 4)
 end
end

:: src/bullet.lua
--[[pod_format="raw",created="2025-08-03 21:02:44",modified="2025-08-03 21:02:44",revision=0]]
Bullet = Object:extend()


local start_y = 102

function Bullet:new()
    self.active = false
    self.img = 22
    self.end_y = recticle.y + 8
    self.halfway = start_y + (self.end_y - start_y) * 0.5
    self.three_quat = ceil(start_y + (self.end_y - start_y) * 0.75)
    self.y = start_y
    self.life = 30
    self.ignited = false
    self.x = recticle.x
    self.starting_size = 5
    -- self.hitbox={x=0,y=0,h=18,w=18}
    self.hitbox = Hitbox(self, self.x, self.y, 18, 18, -6, -6)
    self.size = 8
    self.ticker = 0
    self.peek_y = 0
end

function Bullet:draw()
    --if not self.ignited then
    --rect(self.x-4,self.y-4,self.x+4,self.y+4,9)
    spr(self.img, self.x - 4, self.y - 4)
    --self.hitbox:draw()
    --end
    --rect(self.hitbox.x,self.hitbox.y,self.hitbox.x+self.hitbox.w,self.hitbox.y+self.hitbox.h,5)
end

function Bullet:update()
    if not self.ignited then
        self.y -= 1
    end

    self.ticker += 1
    self.hitbox:update()
    --self.hitbox.x=self.x-9
    --self.hitbox.y=self.y-9
    if self.ticker == 20 then
        self.ticker = 0
    end

    if self.y <= self.halfway and self.y >= self.three_quat then
        -- Change sprite at halfway point
        self.img = 9
    elseif self.y <= self.three_quat then
        -- Change sprite at 3/4ths point
        self.img = 10
        --self.img=16
    else
        -- Default sprite
        self.img = 8
    end

    if self.ignited then
        for m in all(all_missiles) do
            if is_colliding(self.hitbox, m.hitbox) then
                del(all_missiles, m)
            end
        end
    end

    if self.y <= self.end_y then
        self.ignited = true
        --add_boom_sfx(self.x-8,self.y-8)
    end

    if self.ignited then
        self.life -= 1
        self.img = 16
        if self.life == 0 then
            del(all_bullets, self)
        end
    end
end

:: src/game.lua
--[[pod_format="raw",created="2025-08-23 12:05:32",modified="2025-08-23 20:40:25",revision=12]]
local canvas = userdata("u8", 128, 128)


is_debug = true


function _init()
	--fetch("charcoal.font"):poke(0x4000)
	init_obj_tables()
	gamestate = 1
	gameover_str = ""
	game_length = 30
	missile_speed = 0
	player_score = 0
	health = 30
	
	bullet_cost = 5
	en_recharge_ticks = 0
	next_en_rechage = 60
	game_clock = clock:new()
	next_missile = clock:new()


	next_missile:start()
	game_clock:start()

	palt(0, false)
	palt(14, true)
	--poke(0x5f5c,255)
	vid(3)
	player = Player()
	set_up_buildings()
end

function _draw()
	cls(0)
	cls()
	set_draw_target(canvas)
	cls(12)
	map()
	rectfill(0, 128 - 17, 128, 128, 5)


	if gamestate == 1 then
		foreach(all_missiles, function(obj) obj:draw() end)
		foreach(all_buildings, function(obj) obj:draw() end)
		player:draw()
		recticle:draw()

		foreach(all_bullets, function(obj) obj:draw() end)

		p8_print("hp", 2, 120, 7)
		rectfill(10, 120, 10 + health, 124, 11)
		rect(10, 120, 10 + 30, 124, 7)

		p8_print("en", 64, 120, 7)
		rectfill(64 + 8, 120, 64 + 8 + player.energy, 124, 12)
		rect(64 + 8, 120, 64 + 8 + player.energy_max, 124, 7)
	else
		p8_print(gameover_str, 60, 50, 7)
	end




	rect(0, 0, 127, 127, 7)



	set_draw_target()

	--rectfill(56,3,56+128,3+128, 12)
	--rect(56,3,56+128,3+128, 7)

	if is_debug then
		draw_debug(0, 0)
	end







	set_draw_target()

	spr(canvas, 56, 3) --, 100, 100, 0, 0, 128, 128)
	--print("tesing", 0, 50, 7)
end

function _update()
	check_input()
	recticle:update()
	if gamestate == 1 then
		next_missile:update()
		game_clock:update()
	end

	if next_missile.seconds == 4 then
		spawn_missile()
		next_missile:restart()
	end
	if game_clock == game_length then
		goto_gameover("you\nwin")
	end
	player.x = recticle.x + 7
	foreach(all_bullets, function(obj) obj:update() end)
	foreach(all_missiles, function(obj) obj:update() end)
	foreach(all_buildings, function(obj) obj:update() end)
	if player.energy < player.energy_max then
		en_recharge_ticks+=1
	end
	if en_recharge_ticks == next_en_rechage then
		recharge_en()
      en_recharge_ticks = 0
   end
end

function check_input()
	-- body
	if btnp(4) then
		--if player.energy >= bullet_cost then
	      --sfx(0)
	      --player.energy -= bullet_cost
			--shoot_bullet()
		player:shoot_bullet()
	   --end
		--notify("pew")
		--if energy>=bullet_cost then
		--  sfx(0)
		--energy-=bullet_cost
		
		--end
	end

	if btn(5) then
		return
	end
end

function draw_debug(x, y)
	--Debugs Table
	local debugs = {
		"\#3" .. "fps: " .. stat(7),
		"\#3" .. "cpu: " .. flr(stat(1) * 100) .. "%",
		"\#3" .. "ram: " .. flr(stat(0) / 1048576 * 100) / 100 .. "mb",
		----------------
		--"\#1" .. "table: "    .. #table,
		--"\#1" .. "player.x: "    .. player.x,
	}

	--Print Debugs
	for i = 0, #debugs do
		local txt = debugs[i + 1] or ""
		local pad = string.rep(" ", max(0, 15 - #txt))
		print("\014" .. txt .. pad, x, y + (7 * i), 7)
	end
end

function init_obj_tables()
	all_missiles = {}
	all_buildings = {}
	all_bullets = {}
	all_booms = {}
end

function set_up_buildings()
	-- body
	all_buildings = {
		Building(14),
		Building(39),
		Building(65),
		Building(90),
		Building(115),
	}
end

function is_colliding(a, b)
	if ((b.x >= a.x + a.w) or
			(b.x + b.w <= a.x) or
			(b.y >= a.y + a.h) or
			(b.y + b.h <= a.y)) then
		return false
	else
		return true
	end
end

function goto_gameover(str)
	gamestate = 2
	gameover_str = str
end

function recharge_en()
    player.energy = mid(0, player.energy + bullet_cost, player.energy_max)
end

:: src/missile.lua
--[[pod_format="raw",created="2025-08-23 17:48:28",modified="2025-08-23 17:48:28",revision=0]]

Missile=Object:extend()

local pos={4,6,10,12,14,28,30,32,34,36,54,56,58,60,78,80,82,84,106,108,112,116}

function Missile:new()
    self.anmi_t=0
    self.y=-10
    self.x=rnd(pos)
    --_m.x=10+rnd(120)
    --self.tip={x=0,y=0,w=2,h=1}
    --self.body={x=0,y=0,w=3,h=8}
    self.hitbox = Hitbox(self,self.x,self.y+8,3,4, 2, 11)
    self.launched=false
    add(all_missiles, self)
end

function Missile:draw()
    --todo: add flame animation
    spr(5+self.anmi_t%15\7.5,self.x,self.y)
    spr(4,self.x,self.y+8)
    --pset(self.tip.x,self.tip.y,8)
    --rect(self.body.x,self.body.y,self.body.x+self.body.w,self.body.y+self.body.h,8)
    --self.hitbox:draw()
end

function Missile:update()
    
    self.y+=0.2
    self.anmi_t+=1
    --self.y+=1
    --self.body.x=self.x+2
    --self.body.y=self.y+7
    --self.tip.y=self.y+15
    --self.tip.x=self.x+3
    self.hitbox:update()
end

function spawn_missile()
    Missile()
end

:: src/player.lua
--[[pod_format="raw",created="2025-08-23 20:31:16",modified="2025-08-23 20:37:45",revision=1]]
Player = Object:extend()

function Player:new()
	self.x = 30
	self.y = 102
	self.energy = 30
	self.energy_max = 30
end

function Player:draw()
    spr(7,self.x-5,106)
    spr(3, self.x, self.y)
end

function Player:shoot_bullet()
	if self.energy >= bullet_cost then
	   --sfx(0)
		self.energy -= bullet_cost
		local b = Bullet(self.x)
		add(all_bullets, b)
	 end
end
:: src/recticle.lua
recticle = {
    x = 20,
    y = 20,
    update = function(self)
        if btn(2) then self.y = mid(80, self.y - 1, 0) end
        if btn(3) then self.y = mid(80, self.y + 1, 0) end
        if btn(0) then
            self.x -= 1
            sfx(4)
        end
        if btn(1) then
            self.x += 1
            sfx(4)
        end
    end,
    draw = function(self)
        spr(1, self.x, self.y)
        spr(1, self.x + 8, self.y, true)
        spr(1, self.x, self.y + 8, false, true)
        spr(1, self.x + 8, self.y + 8, true, true)
    end
}

:: src/smoke.lua
--[[pod_format="raw",created="2025-08-23 12:11:50",modified="2025-08-23 15:50:58",revision=68]]
Smoke=Object:extend()

Pixel=Object:extend()
function Pixel:new(x,y)
	self.start_x=x
	self.spawn_x_min = x-5
	self.spawn_x_max = x+5
	self.x=randi(self.spawn_x_min, self.spawn_x_max)
	self.y=y
	self.speed=rnd({0.2, 0.3, 0.4})
	self.max_y=y-15
	self.x_min=self.x-2
	self.x_max=self.x+2
	self.move_dir=0.3
end

function Pixel:update()
	
	if self.y <= self.max_y then
		self.y = self.max_y+15
		self.x=randi(self.spawn_x_min, self.spawn_x_max)
		self.speed=rnd({0.2, 0.3, 0.4})
		self.x_min=self.x-2
		self.x_max=self.x+2
	else
		self.y-=self.speed
	end
	
	self.x+=self.move_dir
	if self.x <= self.x_min or self.x >= self.x_max then
		self.move_dir*=-1
	end

end

function Pixel:draw()
	pset(self.x,self.y,8)
end

local pos={4,6,10,12,14,28,30,32,34,36,54,56,58,60,78,80,82,84,106,108,112,116}

function Smoke:new(x,y)
	self.pixels = {}
	for i=1,10 do 
		local p = Pixel(x,y)
		add(self.pixels, p)
	end
end

function Smoke:update()
	foreach(self.pixels, function(obj) obj:update() end)
end

function Smoke:draw()
	foreach(self.pixels, function(obj) obj:draw() end)
end

function Smoke:set_y(y)
	self.y=y
	for p in all(self.pixels) do
		p.max_y=y-15
	end
end
:: src/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTI1IDEyOjQxOjE5Iixtb2RpZmllZD0iMjAyNS0w
OC0yMyAyMDo0MDo1NSJdXQ==
:: main.lua
--[[pod_format="raw",created="2025-01-17 10:35:48",modified="2025-08-23 12:24:00",revision=375]]
--cd ("/projects/level-3")

-- Lib
include("lib/classic.lua")

-- Kgo
include("kgo/functions.lua")
include("kgo/hitbox.lua")
include("kgo/clock.lua")

-- Src
include("src/smoke.lua")
include("src/missile.lua")
include("src/bullet.lua")
include("src/player.lua")
include("src/recticle.lua")
include("src/building.lua")
include("src/game.lua")
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
OC0yMyAyMDo0MDo1NSIscnVudGltZT0yMCx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzEyIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJzcmMvbWlzc2lsZS5sdWEjMiIsd29y
a3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0ic3JjL2dhbWUubHVhIzExMCIsd29ya3NwYWNlX2lu
ZGV4PTF9LHtsb2NhdGlvbj0ic3JjL3Ntb2tlLmx1YSM2MSIsd29ya3NwYWNlX2luZGV4PTF9LHts
b2NhdGlvbj0ic3JjL2J1aWxkaW5nLmx1YSMzMCIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlv
bj0ic3JjL3BsYXllci5sdWEjMjAiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImdmeC8w
LmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9LHtsb2NhdGlvbj0ibWFwLzAubWFwIix3b3Jrc3BhY2Vf
aW5kZXg9M30se2xvY2F0aW9uPSJzZngvMC5zZngiLHdvcmtzcGFjZV9pbmRleD00fX1dXQ==
:: [eoc]
